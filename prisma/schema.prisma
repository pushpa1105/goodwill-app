// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int     @id @default(autoincrement())
  externalId  String  @unique
  attributes  Json
  lang        String?
  name        String?
  email       String?
  phone       String?
  imageUrl    String?
  phoneNumber String?

  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  reviews          Review[]
  comments         Comment[]
  enrolledCourses  CourseEnrollment[]
  enrolledWebinars WebinarEnrollment[]
}

model Course {
  id               String  @id @default(uuid())
  userId           String
  title            String  @db.Text
  description      String? @db.Text
  learnings        String? @db.Text
  requirements     String? @db.Text
  coverage         String? @db.Text
  summary          String? @db.Text
  titleHindi       String? @db.Text
  descriptionHindi String? @db.Text
  summaryHindi     String? @db.Text
  imageUrl         String? @db.Text
  videoUrl         String? @db.Text
  price            Float?
  isFree           Boolean @default(false)
  isPublished      Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  courseVideo CourseVideo?

  chapters    Chapter[]
  attachments Attachment[]
  reviews     Review[]

  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  purchases Purchase[]
  enrollers CourseEnrollment[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id               String  @id @default(uuid())
  title            String
  description      String? @db.Text
  summary          String? @db.Text
  titleHindi       String?
  descriptionHindi String? @db.Text
  summaryHindi     String? @db.Text
  videoUrl         String? @db.Text
  position         Int
  isPublished      Boolean @default(false)
  isFree           Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model CourseVideo {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  courseId String @unique
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  courseId String

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String @id @default(uuid())
  stars      Int
  reviewText String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [externalId], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

// Blogs
model Blog {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String?
  readTime    Int?
  content     Json?
  isPublished Boolean @default(false)

  categoryId String?
  category   BlogCategory? @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  @@index([categoryId])
  @@fulltext([title])
}

model BlogCategory {
  id    String @id @default(uuid())
  name  String @unique
  blogs Blog[]
}

// model Comment {
//   id      Int    @id @default(autoincrement())
//   comment String

//   Children  Comment[] @relation("Comment_Children")
//   parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
//   parent_id Int?
//   blogId    String
// }

model Comment {
  id      String @id @default(uuid())
  message String

  userId String
  user   User   @relation(fields: [userId], references: [externalId], onDelete: Cascade)

  blogId String
  Blog   Blog   @relation(fields: [blogId], references: [id])

  parent   Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("ParentChild")
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@index([parentId])
  @@index([userId])
}

// Blogs

// Products Section

model ProductPageContent {
  id           String @id @default(uuid())
  userId       String
  mainHeading  String @db.Text
  mainImageUrl String
  buttonLabel  String
  buttonUrl    String
  videoUrl     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductData {
  id           String  @id @default(uuid())
  userId       String
  imageUrl     String
  title        String
  description  String  @db.Text
  redirectLink String
  isActive     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Products Section

// Webinar

model Webinar {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.Text
  description String?   @db.Text
  imageUrl    String?
  startAt     DateTime?
  endAt       DateTime?
  level       String?
  language    String    @default("English")
  status      String    @default("upcoming")
  isPublished Boolean   @default(false)

  learnings String? @db.Text

  speakerId String?
  speaker   Speaker? @relation(fields: [speakerId], references: [id])

  enrollers WebinarEnrollment[]

  meetingId       String?
  meetingPassword String?
  leaveUrl        String?

  meetingUrl String?

  useMeetingUrl Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([speakerId])
  @@fulltext([title])
}

model Speaker {
  id       String  @id @default(uuid())
  name     String  @unique
  imageUrl String?
  about    String? @db.Text

  education   String?   @db.Text
  experience  String?   @db.Text
  achievement String?   @db.Text
  webinars    Webinar[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseEnrollment {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [externalId], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId, userId])
}

model WebinarEnrollment {
  id String @id @default(uuid())

  userId String?
  user   User?   @relation(fields: [userId], references: [externalId], onDelete: Cascade)

  webinarId String
  webinar   Webinar @relation(fields: [webinarId], references: [id], onDelete: Cascade)

  name  String @db.Text
  email String @db.Text
  phone String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, webinarId])
  @@index([webinarId, userId])
}
