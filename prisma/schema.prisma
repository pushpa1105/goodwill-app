// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         Int     @id @default(autoincrement())
  externalId String  @unique
  attributes Json
  lang       String?
  name       String?
  email      String?
  imageUrl   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]
}

model Course {
  id               String  @id @default(uuid())
  userId           String
  title            String  @db.Text
  description      String? @db.Text
  summary          String? @db.Text
  titleHindi       String? @db.Text
  descriptionHindi String? @db.Text
  summaryHindi     String? @db.Text
  imageUrl         String? @db.Text
  videoUrl         String? @db.Text
  price            Float?
  isFree           Boolean @default(false)
  isPublished      Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  courseVideo CourseVideo?

  chapters    Chapter[]
  attachments Attachment[]
  reviews     Review[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id               String  @id @default(uuid())
  title            String
  description      String? @db.Text
  summary          String? @db.Text
  titleHindi       String?
  descriptionHindi String? @db.Text
  summaryHindi     String? @db.Text
  videoUrl         String? @db.Text
  position         Int
  isPublished      Boolean @default(false)
  isFree           Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model CourseVideo {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  courseId String @unique
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  courseId String

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String @id @default(uuid())
  stars      Int
  reviewText String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [externalId], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

// Blogs
model Blog {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  content     Json?
  isPublished Boolean @default(false)

  categoryId String?
  category   BlogCategory? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model BlogCategory {
  id    String @id @default(uuid())
  name  String @unique
  blogs Blog[]
}

// Blogs
